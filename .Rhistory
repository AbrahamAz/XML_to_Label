}else{
data <- create_hh_na(116)
}
data_imputed <- kNN(data = data,
variable = c("F_Sub.District_En"),
dist_var = c(dist_var),
weights = NULL,
k = k,
catFun = catFun,
addRandom = addRandom)
bind_rows(data_imputed, arrivals_each) %>%
mutate(original = ifelse(is.na(F_Sub.District_En_imp), "yes", "no")) %>%
group_by(F_Sub.District_En, original) %>%
summarize(n = n()) %>%
pivot_wider(names_from = original,
values_from = n) %>%
mutate(no = ifelse(is.na(no), 0, no),
abs_diff = abs(yes - no)) %>%
ungroup() %>%
summarise(diff = sum(abs_diff) / sum(yes))
}
cal_hh_knn_com <- function(k,
dist_var,
catFun,
addRandom,
forced = FALSE) {
if (forced == TRUE){
data <- hh_forced
}else{
data <- create_hh_na(116)
}
data_imputed <- kNN(data = data,
variable = c("F_Sub.District_En"),
dist_var = c(dist_var),
weights = NULL,
k = k,
catFun = catFun,
addRandom = addRandom)
bind_rows(data_imputed, arrivals_each) %>%
mutate(original = ifelse(is.na(F_Sub.District_En_imp), "yes", "no")) %>%
group_by(T_Community_En, F_Sub.District_En, original) %>%
summarize(n = n()) %>%
pivot_wider(names_from = original,
values_from = n) %>%
mutate(no = ifelse(is.na(no), 0, no),
yes = ifelse(is.na(yes), 0, yes),
abs_diff = abs(yes - no)) %>%
ungroup() %>%
summarise(diff = sum(abs_diff) / sum(yes))
}
set.seed(100)
# SUBkNN_HH_200_LAT.LON.HH_SAMPLE_TRUE <- sapply(1:200, function(i) {
#   cal_hh_knn_sub(200, dist_var = c("lat", "long", "New.Arrivals..HH."), catFun = sampleCat, addRandom = TRUE)}) %>%
#   unlist() %>%
#   mean()
COMkNN_HH_50_LAT.LON.HH_SAMPLE_TRUE <- sapply(1:200, function(i) {
cal_hh_knn_com(50, dist_var = c("lat", "long", "New.Arrivals..HH."), catFun = sampleCat, addRandom = TRUE)}) %>%
unlist() %>%
mean()
knitr::opts_chunk$set(echo = TRUE)
set.seed(100)
# SUBkNN_HH_200_LAT.LON.HH_SAMPLE_TRUE <- sapply(1:200, function(i) {
#   cal_hh_knn_sub(200, dist_var = c("lat", "long", "New.Arrivals..HH."), catFun = sampleCat, addRandom = TRUE)}) %>%
#   unlist() %>%
#   mean()
COMkNN_HH_50_LAT.LON.HH_SAMPLE_TRUE <- sapply(1:200, function(i) {
cal_hh_knn_com(50, dist_var = c("lat", "long", "New.Arrivals..HH."), catFun = sampleCat, addRandom = TRUE, forced = TRUE)}) %>%
unlist() %>%
mean()
library(tidyverse)
library(VIM)
library(DT)
library(writexl)
#To silence the obnoxious group_by warning
options(dplyr.summarise.inform = FALSE)
rm(list = ls())
arrivals <- read.csv("data/REACH_December_2020.csv")
locations <- read.csv("data/ocha_locations.csv")
#Here I'm adding a column for ids.
arrivals <- arrivals %>%
mutate(id = 1:nrow(arrivals))
arrivals %>%
distinct(id) %>%
dim()
#Now adding in GPS points
locations <- locations %>%
rename(lat=Latitude_y, long=Longitude_x, community_pcode=admin4Pcod) %>%
select(lat, long, community_pcode) %>%
rename(T_Community_PCODE = community_pcode) %>%
#It's important to do this or the pcodes with n codes will be duplicated in the join below.
distinct(T_Community_PCODE, .keep_all = TRUE)
arrivals <- left_join(arrivals, locations, by = "T_Community_PCODE")
arrivals %>%
distinct(id) %>%
dim()
# Froced NA
comm_forced <- arrivals %>%
mutate(F_Sub.District_En = ifelse(T_Sub.District_En %in% c("Jandairis","Dana","Raju","Daret Azza"),NA,F_Sub.District_En))
#Arrival conc
arrivals <- arrivals %>%
mutate(conc = paste0(T_Community_En,"_",F_Sub.District_En))
arr <- arrivals %>%
select(id, conc)
create_hh_na <- function(n)  {
na <- sample_n(arrivals, n) %>%
mutate(F_Sub.District_En = NA)
not_na <-anti_join(arrivals, na, by = "id")
with_na <- bind_rows(not_na, na)
with_na <- with_na %>%
rowwise() %>%
slice(rep(1:n(), each = New.Arrivals..HH.)) %>%
mutate(junk = runif(1))
}
hh_forced <- arrivals %>%
mutate(F_Sub.District_En = ifelse(T_Sub.District_En %in% c("Jandairis","Dana","Raju","Daret Azza"),NA,F_Sub.District_En)) %>%
rowwise() %>%
slice(rep(1:n(), each = New.Arrivals..HH.)) %>%
mutate(junk = runif(1))
#Outside of the function, we also generate the df called "arrivals_each" that represents each arrival as one row.
arrivals_each <- arrivals %>%
filter(!is.na(F_Sub.District_En)) %>%
rowwise() %>%
slice(rep(1:n(), each = New.Arrivals..HH.)) %>%
mutate(conc = paste0(T_Community_En,"_",F_Sub.District_En))
arr_each <- arrivals_each %>%
select(id, conc)
set.seed(100)
dat_hh <- create_hh_na(116)
cal_hh_hotdeck_sub <- function(order, domain, forced = FALSE) {
if (forced == TRUE){
data <- hh_forced
}else{
data <- create_hh_na(116)
}
data_imputed <- hotdeck(data = data,
variable = c("F_Sub.District_En"),
ord_var = c(order),
domain_var = c(domain))
bind_rows(data_imputed, arrivals_each) %>%
mutate(original = ifelse(is.na(F_Sub.District_En_imp), "yes", "no")) %>%
group_by(F_Sub.District_En, original) %>%
summarize(n = n()) %>%
pivot_wider(names_from = original,
values_from = n) %>%
mutate(no = ifelse(is.na(no), 0, no),
abs_diff = abs(yes - no)) %>%
ungroup() %>%
summarise(diff = sum(abs_diff) / sum(yes))
}
cal_hh_hotdeck_com <- function(order, domain, forced = FALSE) {
if (forced == TRUE){
data <- hh_forced
}else{
data <- create_hh_na(116)
}
data_imputed <- hotdeck(data = data,
variable = c("F_Sub.District_En"),
ord_var = c(order),
domain_var = c(domain))
bind_rows(data_imputed, arrivals_each) %>%
mutate(original = ifelse(is.na(F_Sub.District_En_imp), "yes", "no")) %>%
group_by(T_Community_En, F_Sub.District_En, original) %>%
summarize(n = n()) %>%
pivot_wider(names_from = original,
values_from = n) %>%
mutate(no = ifelse(is.na(no), 0, no),
yes = ifelse(is.na(yes), 0, yes),
abs_diff = abs(yes - no)) %>%
ungroup() %>%
summarise(diff = sum(abs_diff) / sum(yes))
}
cal_hh_knn_sub <- function(k,
dist_var,
catFun,
addRandom,
forced = FALSE) {
if (forced == TRUE){
data <- hh_forced
}else{
data <- create_hh_na(116)
}
data_imputed <- kNN(data = data,
variable = c("F_Sub.District_En"),
dist_var = c(dist_var),
weights = NULL,
k = k,
catFun = catFun,
addRandom = addRandom)
bind_rows(data_imputed, arrivals_each) %>%
mutate(original = ifelse(is.na(F_Sub.District_En_imp), "yes", "no")) %>%
group_by(F_Sub.District_En, original) %>%
summarize(n = n()) %>%
pivot_wider(names_from = original,
values_from = n) %>%
mutate(no = ifelse(is.na(no), 0, no),
abs_diff = abs(yes - no)) %>%
ungroup() %>%
summarise(diff = sum(abs_diff) / sum(yes))
}
cal_hh_knn_com <- function(k,
dist_var,
catFun,
addRandom,
forced = FALSE) {
if (forced == TRUE){
data <- hh_forced
}else{
data <- create_hh_na(116)
}
data_imputed <- kNN(data = data,
variable = c("F_Sub.District_En"),
dist_var = c(dist_var),
weights = NULL,
k = k,
catFun = catFun,
addRandom = addRandom)
bind_rows(data_imputed, arrivals_each) %>%
mutate(original = ifelse(is.na(F_Sub.District_En_imp), "yes", "no")) %>%
group_by(T_Community_En, F_Sub.District_En, original) %>%
summarize(n = n()) %>%
pivot_wider(names_from = original,
values_from = n) %>%
mutate(no = ifelse(is.na(no), 0, no),
yes = ifelse(is.na(yes), 0, yes),
abs_diff = abs(yes - no)) %>%
ungroup() %>%
summarise(diff = sum(abs_diff) / sum(yes))
}
cal_hh_hotdeck_com_draft <- function(order, domain, forced = FALSE) {
if (forced == TRUE){
data <- hh_forced
}else{
data <- create_hh_na(116)
}
data_imputed <- hotdeck(data = data,
variable = c("F_Sub.District_En"),
ord_var = c(order),
domain_var = c(domain))
data_imputed %>%
select(F_Sub.District_En,T_Community_En,New.Arrivals..HH.,id,F_Sub.District_En_imp) %>%
filter(F_Sub.District_En_imp == TRUE) %>%
mutate(conc_imp = paste0(T_Community_En,"_",F_Sub.District_En)) %>%
left_join(arr_each, by = "id") %>%
mutate(wrong_imp = ifelse(conc == conc_imp, 0, New.Arrivals..HH.)) %>%
ungroup() %>%
summarise(error_imp = sum(wrong_imp) / sum(New.Arrivals..HH.))
}
cal_hh_knn_com_draft <- function(k,
dist_var,
catFun,
addRandom,
forced = FALSE) {
if (forced == TRUE){
data <- hh_forced
}else{
data <- create_hh_na(116)
}
data_imputed <- kNN(data = data,
variable = c("F_Sub.District_En"),
dist_var = c(dist_var),
weights = NULL,
k = k,
catFun = catFun,
addRandom = addRandom)
data_imputed %>%
select(F_Sub.District_En,T_Community_En,New.Arrivals..HH.,id,F_Sub.District_En_imp) %>%
filter(F_Sub.District_En_imp == TRUE) %>%
mutate(conc_imp = paste0(T_Community_En,"_",F_Sub.District_En)) %>%
left_join(arr_each, by = "id") %>%
mutate(wrong_imp = ifelse(conc == conc_imp, 0, New.Arrivals..HH.)) %>%
ungroup() %>%
summarise(error_imp = sum(wrong_imp) / sum(New.Arrivals..HH.))
}
set.seed(100)
# SUBkNN_HH_200_LAT.LON.HH_SAMPLE_TRUE <- sapply(1:200, function(i) {
#   cal_hh_knn_sub(200, dist_var = c("lat", "long", "New.Arrivals..HH."), catFun = sampleCat, addRandom = TRUE)}) %>%
#   unlist() %>%
#   mean()
COMkNN_HH_50_LAT.LON.HH_SAMPLE_TRUE <- sapply(1:200, function(i) {
cal_hh_knn_com(50, dist_var = c("lat", "long", "New.Arrivals..HH."), catFun = sampleCat, addRandom = TRUE, forced = TRUE)}) %>%
unlist() %>%
mean()
set.seed(100)
# SUBkNN_HH_200_LAT.LON_MAX_TRUE <- sapply(1:200, function(i) {
#   cal_hh_knn_sub(200, dist_var = c("lat", "long"), catFun = maxCat, addRandom = TRUE)}) %>%
#   unlist() %>%
#   mean()
COMkNN_HH_50_LAT.LON_MAX_TRUE <- sapply(1:200, function(i) {
cal_hh_knn_com(50, dist_var = c("lat", "long"), catFun = maxCat, addRandom = TRUE, forced = TRUE)}) %>%
unlist() %>%
mean()
set.seed(100)
# SUBkNN_HH_200_LAT.LON_SAMPLE_FALSE <- sapply(1:200, function(i) {
#   cal_hh_knn_sub(200, dist_var = c("lat", "long"), catFun = sampleCat, addRandom = FALSE)}) %>%
#   unlist() %>%
#   mean()
COMkNN_HH_50_LAT.LON_SAMPLE_FALSE <- sapply(1:200, function(i) {
cal_hh_knn_com(50, dist_var = c("lat", "long"), catFun = sampleCat, addRandom = FALSE, forced = TRUE)}) %>%
unlist() %>%
mean()
#Codes added to export results for paper
#Creating data frame with all results
# plot3sub <- data.frame(Approach=c("SUBkNN_HH_200_LAT.LON.HH_SAMPLE_TRUE","SUBkNN_HH_200_LAT.LON_MAX_TRUE",
#                                "SUBkNN_HH_200_LAT.LON_SAMPLE_FALSE"),
#                     Margin_Error = c(SUBkNN_HH_200_LAT.LON.HH_SAMPLE_TRUE,SUBkNN_HH_200_LAT.LON_MAX_TRUE,
#                                      SUBkNN_HH_200_LAT.LON_SAMPLE_FALSE)) %>%
#   mutate(Margin_Error = round(Margin_Error, 4))
plot3comforced <- data.frame(Approach=c("COMkNN_HH_50_LAT.LON.HH_SAMPLE_TRUE","COMkNN_HH_50_LAT.LON_MAX_TRUE",
"COMkNN_HH_50_LAT.LON_SAMPLE_FALSE"),
Margin_Error = c(COMkNN_HH_50_LAT.LON.HH_SAMPLE_TRUE,COMkNN_HH_50_LAT.LON_MAX_TRUE,
COMkNN_HH_50_LAT.LON_SAMPLE_FALSE)) %>%
mutate(Margin_Error = round(Margin_Error, 4))
# write_xlsx(plot3sub, "output/plot3sub.xlsx")
write_xlsx(plot3com, "output/plot3com.xlsx")
# write_xlsx(plot3sub, "output/plot3sub.xlsx")
write_xlsx(plot3comforced, "output/plot3comforced.xlsx")
set.seed(100)
# SUBkNN_HH_200_LAT.LON.HH_SAMPLE_TRUE_F <- sapply(1:200, function(i) {
#   cal_hh_knn_sub(200, dist_var = c("lat", "long", "New.Arrivals..HH."), catFun = sampleCat, addRandom = TRUE,
#                  forced = TRUE)}) %>%
#   unlist() %>%
#   mean()
##RUN here tomorrow
COMkNN_HH_50_LAT.LON.HH_SAMPLE_TRUE_F <- sapply(1:200, function(i) {
cal_hh_knn_com_draft(50, dist_var = c("lat", "long", "New.Arrivals..HH."), catFun = sampleCat, addRandom = TRUE,
forced = FALSE)}) %>%
unlist() %>%
mean()
set.seed(100)
# SUBkNN_HH_200_LAT.LON_MAX_TRUE_F <- sapply(1:200, function(i) {
#   cal_hh_knn_sub(200, dist_var = c("lat", "long"), catFun = maxCat, addRandom = TRUE,forced = TRUE)}) %>%
#   unlist() %>%
#   mean()
COMkNN_HH_50_LAT.LON_MAX_TRUE_F <- sapply(1:200, function(i) {
cal_hh_knn_com_draft(50, dist_var = c("lat", "long"), catFun = maxCat, addRandom = TRUE,forced = FALSE)}) %>%
unlist() %>%
mean()
set.seed(100)
# SUBkNN_HH_200_LAT.LON_SAMPLE_FALSE_F <- sapply(1:200, function(i) {
#   cal_hh_knn_sub(200, dist_var = c("lat", "long"), catFun = sampleCat, addRandom = FALSE,forced = TRUE)}) %>%
#   unlist() %>%
#   mean()
COMkNN_HH_50_LAT.LON_SAMPLE_FALSE_F <- sapply(1:200, function(i) {
cal_hh_knn_com_draft(50, dist_var = c("lat", "long"), catFun = sampleCat, addRandom = FALSE, forced = FALSE)}) %>%
unlist() %>%
mean()
#Run here
plot3com_draft_f <- data.frame(Approach=c("COMkNN_HH_50_LAT.LON.HH_SAMPLE_TRUE_F","COMkNN_HH_50_LAT.LON_MAX_TRUE_F",
"COMkNN_HH_50_LAT.LON_SAMPLE_FALSE_F"),
Margin_Error = c(COMkNN_HH_50_LAT.LON.HH_SAMPLE_TRUE_F,COMkNN_HH_50_LAT.LON_MAX_TRUE_F,
COMkNN_HH_50_LAT.LON_SAMPLE_FALSE_F)) %>%
mutate(Margin_Error = round(Margin_Error, 4))
# write_xlsx(plot3subforced, "output/plot3subforced.xlsx")
write_xlsx(plot3com_draft_f, "output/plot3com_draft_f.xlsx")
install.packages("rlang")
packageVersion('rlang')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
library(tidyverse)
library(readxl)
library(openxlsx)
source("src/utils.R")
# Input
filename_tool <- "resources/Supply_Chain_Analysis_Retailers_tool.xlsx"
filename_cleaned_data <- "resources/data_cleaned.xlsx"
# Output
filename_labeled_output <- "output/dataset_labels.xlsx"
# First loading tool
tool_survey <- read_excel(filename_tool, sheet = "survey", col_types = "text") %>%
filter(!is.na(name)) %>%
mutate(q.type = as.character(lapply(type, function(x) str_split(x, " ")[[1]][1])),
list_name = as.character(lapply(type, function(x) str_split(x, " ")[[1]][2])))
tool_choices <- read_excel(filename_tool, sheet = "choices", col_types = "text") %>%
filter(!is.na(list_name))
# Loading the data
data <- read_excel(filename_cleaned_data, col_types = "text")
data_labeled <- data
# XML to Label
col_names <- colnames(data)
tool_multi <- tool_survey %>%
filter(str_starts(type, "select_multiple "))
col_multi <- tool_multi$name
for (i in 1:length(col_multi)){
data_labeled[[col_multi[i]]] <- name2label_choices_multiple(tool_survey,tool_choices,data,col_multi[i])
}
# XML to Label
col_names <- colnames(data)
for (a in 1:length(col_names)) {
colnames(data_labeled)[a] <- name2label_question(tool_survey, tool_choices, col_names[a])
data_labeled[[colnames(data_labeled)[a]]] <- name2label_choices_one(tool_survey,tool_choices,col_names[a],data)
}
source("src/utils.R")
for (a in 1:length(col_names)) {
colnames(data_labeled)[a] <- name2label_question(tool_survey, tool_choices, col_names[a])
data_labeled[[colnames(data_labeled)[a]]] <- name2label_choices_one(tool_survey,tool_choices,col_names[a],data)
}
source("src/utils.R")
for (a in 1:length(col_names)) {
colnames(data_labeled)[a] <- name2label_question(tool_survey, tool_choices, col_names[a])
data_labeled[[colnames(data_labeled)[a]]] <- name2label_choices_one(tool_survey,tool_choices,col_names[a],data)
}
name2label_choices_one(tool_survey,tool_choices,col_names[1],data)
source("src/utils.R")
name2label_choices_one(tool_survey,tool_choices,col_names[1],data)
source("src/utils.R")
name2label_choices_one(tool_survey,tool_choices,col_names[1],data)
a <-name2label_choices_one(tool_survey,tool_choices,col_names[1],data)
a <-name2label_choices_one(tool_survey,tool_choices,col_names[2],data)
for (i in 1:length(col_names)) {
colnames(data_labeled)[i] <- name2label_question(tool_survey, tool_choices, col_names[i])
data_labeled[[colnames(data_labeled)[i]]] <- name2label_choices_one(tool_survey,tool_choices,col_names[i],data)
}
tool_one <- tool_survey %>%
filter(str_starts(type, "select_one "))
col_one <- tool_one$name
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
library(tidyverse)
library(readxl)
library(openxlsx)
source("src/utils.R")
# Input
filename_tool <- "resources/Supply_Chain_Analysis_Retailers_tool.xlsx"
filename_cleaned_data <- "resources/data_cleaned.xlsx"
# Output
filename_labeled_output <- "output/dataset_labels.xlsx"
# First loading tool
tool_survey <- read_excel(filename_tool, sheet = "survey", col_types = "text") %>%
filter(!is.na(name)) %>%
mutate(q.type = as.character(lapply(type, function(x) str_split(x, " ")[[1]][1])),
list_name = as.character(lapply(type, function(x) str_split(x, " ")[[1]][2])))
tool_choices <- read_excel(filename_tool, sheet = "choices", col_types = "text") %>%
filter(!is.na(list_name))
# Loading the data
data <- read_excel(filename_cleaned_data, col_types = "text")
data_labeled <- data
tool_one <- tool_survey %>%
filter(str_starts(type, "select_one "))
col_one <- tool_one$name
for (i in 1:length(col_one)){
data_labeled[[col_one[i]]] <- name2label_choices_one(tool_survey,tool_choices,col_one[i],data)
}
source("src/utils.R")
# Input
filename_tool <- "resources/Supply_Chain_Analysis_Retailers_tool.xlsx"
filename_cleaned_data <- "resources/data_cleaned.xlsx"
# Output
filename_labeled_output <- "output/dataset_labels.xlsx"
# First loading tool
tool_survey <- read_excel(filename_tool, sheet = "survey", col_types = "text") %>%
filter(!is.na(name)) %>%
mutate(q.type = as.character(lapply(type, function(x) str_split(x, " ")[[1]][1])),
list_name = as.character(lapply(type, function(x) str_split(x, " ")[[1]][2])))
tool_choices <- read_excel(filename_tool, sheet = "choices", col_types = "text") %>%
filter(!is.na(list_name))
# Loading the data
data <- read_excel(filename_cleaned_data, col_types = "text")
data_labeled <- data
tool_one <- tool_survey %>%
filter(str_starts(type, "select_one "))
col_one <- tool_one$name
for (i in 1:length(col_one)){
data_labeled[[col_one[i]]] <- name2label_choices_one(tool_survey,tool_choices,col_one[i],data)
}
q.type <- tool_survey$type[tool_survey$name==col_one[1]]
q.list_name <- str_split(q.type, " ")[[1]][2]
choices <- tool_choices %>% filter(list_name = q.list_name) %>%
select(name, `label::english`) %>% rename(label = `label::english`)
choices <- tool_choices %>% filter(list_name == q.list_name) %>%
select(name, `label::english`) %>% rename(label = `label::english`)
View(choices)
d <- data.frame(col=as.character(data[[col]])) %>%
left_join(choices, by=c("col"="name")) %>% select(label)
d <- data.frame(col=as.character(data[[col_one[1]]])) %>%
left_join(choices, by=c("col"="name")) %>% select(label)
View(d)
tool_one$name
for (i in 1:length(col_one)){
data_labeled[[col_one[i]]] <- name2label_choices_one(tool_survey,tool_choices,col_one[i],data)
}
View(d)
View(data_labeled)
View(d)
View(choices)
a <- name2label_choices_one(tool_survey,tool_choices,col_one[1],data)
a <- name2label_choices_one(tool_survey,tool_choices,col_one[2],data)
a <- name2label_choices_one(tool_survey,tool_choices,col_one[3],data)
a <- name2label_choices_one(tool_survey,tool_choices,col_one[4],data)
data_labeled[[col_one[4]]]
is.null(data_labeled[[col_one[4]]])
is.null(data_labeled[[col_one[3]]])
for (i in 1:length(col_one)){
if(!is.null(data_labeled[[col_one[i]]])){
data_labeled[[col_one[i]]] <- name2label_choices_one(tool_survey,tool_choices,col_one[i],data)
}
}
View(data_labeled)
View(tool_survey)
View(tool_one)
View(tool_choices)
tool_multi <- tool_survey %>%
filter(str_starts(type, "select_multiple "))
col_multi <- tool_multi$name
for (i in 1:length(col_multi)){
data_labeled[[col_multi[i]]] <- name2label_choices_multiple(tool_survey,tool_choices,data,col_multi[i])
}
# Questions - XML to Label
col_names <- colnames(data)
for (i in 1:length(col_names)) {
colnames(data_labeled)[i] <- name2label_question(tool_survey, tool_choices, col_names[i])
}
View(data_labeled)
